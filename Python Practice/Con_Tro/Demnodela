class Node: 
    def __init__ (self,val):
        self.pleft = None
        self.pright = None
        self.data = val
    def deleteNode(self):
        self.pleft = None
        self.pright = None
        self.data = None
class Tree:
    def __init__ (self):
        self.root = None
    def getroot(self):
        return self.root
    def add(self,val):
        if self.root == None:
            self.root = Node(val)
        else:
            self._add (self.root,val)
    def _add(self,node, val):
        if val < node.data :
            if node.pleft is not None:
                self._add(node.pleft,val)
            else:
                node.pleft = Node(val)
                return 1
        else:
            if val > node.data:
                if node.pright is not None:
                    self._add(node.pright,val)
                else: 
                    node.pright = Node(val)
                    return 1
            else:
                return 0
    def find(self,val):
        if self.root is not None:
            return self._find(self.root,val)
        else:
            return None
    def _find(self,Node,val):
        if val == Node.data:
            return Node
        elif val > Node.data and Node.pleft is not None:
            self._find(self.pleft,val)
        elif val<Node.data and Node.pright is not None:
            self._find(self.pright,val)
    def printTree(self):
        if self.root is not None:
            self._printTree(self.root)
    def _printTree(self,Node):
        if Node is not None:
            self._printTree(Node.pleft)
            print(str(Node.data)+ '  ')
            self._printTree(Node.pright)
    def deleteTree(self):
        # garbage collector will do this for us. 
        self.root = None
    def Countleaf (self):
        if self is None:
            return 0
        else :
            return self._Count(self.root)
    def _Count(self,node):
        if node is None:
            return 0
        elif node.pleft is None and node.pright is None:
            return 1
        else:
            return self._Count(node.pleft)+ self._Count(node.pright)
tree = Tree()
x = 1
while x!=0:
    x = int(input())
    if (x== 0):
        break
    tree.add(x)

print(tree.Countleaf())
